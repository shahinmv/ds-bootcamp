which(is.na(data))
h2o.init()
h2o_data <- df %>% as.h2o()
# Splitting the data ----
h2o_data <- h2o_data %>% h2o.splitFrame(ratios = 0.8, seed = 123)
train <- h2o_data[[1]]
test <- h2o_data[[2]]
library(h2o)
data <- mpg
which(is.na(data))
h2o.init()
h2o_data <- df %>% as.h2o()
# Splitting the data ----
h2o_data <- h2o_data %>% h2o.splitFrame(ratios = 0.8, seed = 123)
h2o.init()
h2o_data <- df %>% as.h2o()
library(ggplot2)
library(caret)
library(dplyr)
library(mltools)
library(data.table)
library(h2o)
data <- mpg
which(is.na(data))
h2o.init()
h2o_data <- df %>% as.h2o()
# Splitting the data ----
h2o_data <- h2o_data %>% h2o.splitFrame(ratios = 0.8, seed = 123)
train <- h2o_data[[1]]
test <- h2o_data[[2]]
y <- "cty"
x <- c("year", "cyl", "displ")
model <- h2o.glm(
x = features, y = target,
training_frame = train,
validation_frame = test,
nfolds = 10, seed = 123,
lambda = 0, compute_p_values = T)
model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3)) %>%
.[-1,] %>%
arrange(desc(p_value))
h2o.init()
h2o_data <- df %>% as.h2o()
library(ggplot2)
library(caret)
library(dplyr)
library(mltools)
library(data.table)
library(h2o)
data <- mpg
h2o.init()
# Splitting the data ----
h2o_data <- h2o_data %>% h2o.splitFrame(ratios = 0.8, seed = 123)
h2o_data <- h2o_data %>% h2o.splitFrame(ratios = 0.8, seed = 123)
train <- h2o_data[[1]]
test <- h2o_data[[2]]
y <- "cty"
x <- c("year", "cyl", "displ")
model <- h2o.glm(
x = features, y = target,
training_frame = train,
validation_frame = test,
nfolds = 10, seed = 123,
lambda = 0, compute_p_values = T)
model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3)) %>%
.[-1,] %>%
arrange(desc(p_value))
library(ggplot2)
library(caret)
library(dplyr)
library(mltools)
library(data.table)
library(h2o)
data <- mpg
which(is.na(data))
h2o.init()
h2o_data <- df %>% as.h2o()
# Splitting the data ----
h2o_data <- h2o_data %>% h2o.splitFrame(ratios = 0.8, seed = 123)
train <- h2o_data[[1]]
test <- h2o_data[[2]]
y <- "cty"
x <- c("year", "cyl", "displ")
model <- h2o.glm(
x = features, y = target,
training_frame = train,
validation_frame = test,
nfolds = 10, seed = 123,
lambda = 0, compute_p_values = T)
model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3)) %>%
.[-1,] %>%
arrange(desc(p_value))
h2o_data <- data %>% as.h2o()
# Splitting the data ----
h2o_data <- h2o_data %>% h2o.splitFrame(ratios = 0.8, seed = 123)
train <- h2o_data[[1]]
test <- h2o_data[[2]]
y <- "cty"
x <- c("year", "cyl", "displ")
model <- h2o.glm(
x = features, y = target,
training_frame = train,
validation_frame = test,
nfolds = 10, seed = 123,
lambda = 0, compute_p_values = T)
model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3)) %>%
.[-1,] %>%
arrange(desc(p_value))
library(ggplot2)
library(caret)
library(dplyr)
library(mltools)
library(data.table)
library(h2o)
data <- mpg
which(is.na(data))
h2o.init()
h2o_data <- data %>% as.h2o()
# Splitting the data ----
h2o_data <- h2o_data %>% h2o.splitFrame(ratios = 0.8, seed = 123)
train <- h2o_data[[1]]
test <- h2o_data[[2]]
target <- "cty"
features <- c("year", "cyl", "displ")
model <- h2o.glm(
x = features, y = target,
training_frame = train,
validation_frame = test,
nfolds = 10, seed = 123,
lambda = 0, compute_p_values = T)
model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3)) %>%
.[-1,] %>%
arrange(desc(p_value))
library(tidyverse)
library(data.table)
library(rstudioapi)
library(skimr)
library(inspectdf)
library(mice)
library(plotly)
library(highcharter)
library(recipes)
library(caret)
library(purrr)
library(graphics)
library(Hmisc)
library(glue)
data <- read.csv("crimes.csv")
target <- 'ViolentCrimesPerPop'
features <- data %>% select(-ViolentCrimesPerPop) %>% names()
f <- as.formula(paste(target, paste(features, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
glm %>% summary()
coef_na <- attributes(alias(glm)$Complete)$dimnames[[1]]
features <- features[!features %in% coef_na]
f <- as.formula(paste(target, paste(features, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
glm %>% summary()
# VIF (Variance Inflation Factor) ----
while(glm %>% faraway::vif() %>% sort(decreasing = T) %>% .[1] >= 1.5){
afterVIF <- glm %>% faraway::vif() %>% sort(decreasing = T) %>% .[-1] %>% names()
f <- as.formula(paste(target, paste(afterVIF, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
}
glm %>% faraway::vif() %>% sort(decreasing = T) %>% names() -> features
df <- df %>% select(ViolentCrimesPerPop,features)
df %>% glimpse()
df[,-1] <- df[,-1] %>% scale() %>% as.data.frame()
View(data)
View(data)
data <- read.csv("crimes.csv")
setwd("C:/Users/shahinmammadov/Desktop/ds-bootcamp/Rprogramming/Week 10")
library(tidyverse)
library(data.table)
library(rstudioapi)
library(skimr)
library(inspectdf)
library(mice)
library(plotly)
library(highcharter)
library(recipes)
library(caret)
library(purrr)
library(graphics)
library(Hmisc)
library(glue)
data <- read.csv("crimes.csv")
target <- 'ViolentCrimesPerPop'
features <- data %>% select(-ViolentCrimesPerPop) %>% names()
f <- as.formula(paste(target, paste(features, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
glm %>% summary()
coef_na <- attributes(alias(glm)$Complete)$dimnames[[1]]
features <- features[!features %in% coef_na]
f <- as.formula(paste(target, paste(features, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
glm %>% summary()
# VIF (Variance Inflation Factor) ----
while(glm %>% faraway::vif() %>% sort(decreasing = T) %>% .[1] >= 1.5){
afterVIF <- glm %>% faraway::vif() %>% sort(decreasing = T) %>% .[-1] %>% names()
f <- as.formula(paste(target, paste(afterVIF, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
}
glm %>% faraway::vif() %>% sort(decreasing = T) %>% names() -> features
df <- df %>% select(ViolentCrimesPerPop,features)
df %>% glimpse()
df[,-1] <- df[,-1] %>% scale() %>% as.data.frame()
library(tidyverse)
library(data.table)
library(rstudioapi)
library(skimr)
library(inspectdf)
library(mice)
library(plotly)
library(highcharter)
library(recipes)
library(caret)
library(purrr)
library(graphics)
library(Hmisc)
library(glue)
data <- read.csv("crimes.csv")
target <- 'ViolentCrimesPerPop'
features <- data %>% select(-ViolentCrimesPerPop) %>% names()
f <- as.formula(paste(target, paste(features, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
glm %>% summary()
coef_na <- attributes(alias(glm)$Complete)$dimnames[[1]]
features <- features[!features %in% coef_na]
f <- as.formula(paste(target, paste(features, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
glm %>% summary()
# VIF (Variance Inflation Factor) ----
while(glm %>% faraway::vif() %>% sort(decreasing = T) %>% .[1] >= 1.5){
afterVIF <- glm %>% faraway::vif() %>% sort(decreasing = T) %>% .[-1] %>% names()
f <- as.formula(paste(target, paste(afterVIF, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
}
glm %>% faraway::vif() %>% sort(decreasing = T) %>% names() -> features
df <- df %>% select(ViolentCrimesPerPop,features)
df %>% glimpse()
df[,-1] <- df[,-1] %>% scale() %>% as.data.frame()
library(tidyverse)
library(data.table)
library(rstudioapi)
library(skimr)
library(inspectdf)
library(mice)
library(plotly)
library(highcharter)
library(recipes)
library(caret)
library(purrr)
library(graphics)
library(Hmisc)
library(glue)
df <- read.csv("crimes.csv")
target <- 'ViolentCrimesPerPop'
features <- df %>% select(-ViolentCrimesPerPop) %>% names()
f <- as.formula(paste(target, paste(features, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
glm %>% summary()
coef_na <- attributes(alias(glm)$Complete)$dimnames[[1]]
features <- features[!features %in% coef_na]
f <- as.formula(paste(target, paste(features, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
glm %>% summary()
# VIF (Variance Inflation Factor) ----
while(glm %>% faraway::vif() %>% sort(decreasing = T) %>% .[1] >= 1.5){
afterVIF <- glm %>% faraway::vif() %>% sort(decreasing = T) %>% .[-1] %>% names()
f <- as.formula(paste(target, paste(afterVIF, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
}
glm %>% faraway::vif() %>% sort(decreasing = T) %>% names() -> features
df <- df %>% select(ViolentCrimesPerPop,features)
df %>% glimpse()
df[,-1] <- df[,-1] %>% scale() %>% as.data.frame()
h2o.init()
h2o_data <- df %>% as.h2o()
# Splitting the data ----
h2o_data <- h2o_data %>% h2o.splitFrame(ratios = 0.8, seed = 123)
train <- h2o_data[[1]]
test <- h2o_data[[2]]
target <- 'ViolentCrimesPerPop'
features <- df %>% select(-ViolentCrimesPerPop) %>% names()
model <- h2o.glm(
x = features, y = target,
training_frame = train,
validation_frame = test,
nfolds = 10, seed = 123,
lambda = 0, compute_p_values = T)
model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3)) %>%
.[-1,] %>%
arrange(desc(p_value))
y_pred <- model %>% h2o.predict(newdata = test) %>% as.data.frame()
y_pred$predict
test_set <- test %>% as.data.frame()
residuals = test_set$Life_expectancy - y_pred$predict
# Calculate RMSE (Root Mean Square Error) ----
RMSE = sqrt(mean(residuals^2))
# Calculate Adjusted R2 (R Squared) ----
y_test_mean = mean(test_set$Life_expectancy)
RMSE = sqrt(mean(residuals^2)) %>% view()
# Calculate Adjusted R2 (R Squared) ----
y_test_mean = mean(test_set$Life_expectancy) %>% view()
(RMSE = sqrt(mean(residuals^2)))
# Calculate Adjusted R2 (R Squared) ----
(y_test_mean = mean(test_set$Life_expectancy))
while(model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3)) %>%
.[-1,] %>%
arrange(desc(p_value)) %>%
.[1,2] > 0.05) {
model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3)) %>%
filter(!is.nan(p_value)) %>%
.[-1,] %>%
arrange(desc(p_value)) %>%
.[1,1] -> v
features <- features[features!=v]
train_h2o <- train %>% as.data.frame() %>% select(target,features) %>% as.h2o()
test_h2o <- test %>% as.data.frame() %>% select(target,features) %>% as.h2o()
model <- h2o.glm(
x = features, y = target,
training_frame = train,
validation_frame = test,
nfolds = 10, seed = 123,
lambda = 0, compute_p_values = T)
}
model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3))
y_pred <- model %>% h2o.predict(newdata = test) %>% as.data.frame()
y_pred$predict
test_set <- test %>% as.data.frame()
residuals = test_set$Life_expectancy - y_pred$predict
# Calculate RMSE (Root Mean Square Error) ----
(RMSE = sqrt(mean(residuals^2)))
# Calculate Adjusted R2 (R Squared) ----
(y_test_mean = mean(test_set$Life_expectancy))
library(tidyverse)
library(data.table)
library(rstudioapi)
library(skimr)
library(inspectdf)
library(mice)
library(plotly)
library(highcharter)
library(recipes)
library(caret)
library(purrr)
library(graphics)
library(Hmisc)
library(glue)
df <- read.csv("crimes.csv")
target <- 'ViolentCrimesPerPop'
features <- df %>% select(-ViolentCrimesPerPop) %>% names()
f <- as.formula(paste(target, paste(features, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
glm %>% summary()
coef_na <- attributes(alias(glm)$Complete)$dimnames[[1]]
features <- features[!features %in% coef_na]
f <- as.formula(paste(target, paste(features, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
glm %>% summary()
# VIF (Variance Inflation Factor) ----
while(glm %>% faraway::vif() %>% sort(decreasing = T) %>% .[1] >= 1.5){
afterVIF <- glm %>% faraway::vif() %>% sort(decreasing = T) %>% .[-1] %>% names()
f <- as.formula(paste(target, paste(afterVIF, collapse = " + "), sep = " ~ "))
glm <- glm(f, data = df)
}
glm %>% faraway::vif() %>% sort(decreasing = T) %>% names() -> features
df <- df %>% select(ViolentCrimesPerPop,features)
df %>% glimpse()
df[,-1] <- df[,-1] %>% scale() %>% as.data.frame()
h2o.init()
h2o_data <- df %>% as.h2o()
# Splitting the data ----
h2o_data <- h2o_data %>% h2o.splitFrame(ratios = 0.8, seed = 123)
train <- h2o_data[[1]]
test <- h2o_data[[2]]
target <- 'ViolentCrimesPerPop'
features <- df %>% select(-ViolentCrimesPerPop) %>% names()
model <- h2o.glm(
x = features, y = target,
training_frame = train,
validation_frame = test,
nfolds = 10, seed = 123,
lambda = 0, compute_p_values = T)
model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3)) %>%
.[-1,] %>%
arrange(desc(p_value))
while(model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3)) %>%
.[-1,] %>%
arrange(desc(p_value)) %>%
.[1,2] > 0.05) {
model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3)) %>%
filter(!is.nan(p_value)) %>%
.[-1,] %>%
arrange(desc(p_value)) %>%
.[1,1] -> v
features <- features[features!=v]
train_h2o <- train %>% as.data.frame() %>% select(target,features) %>% as.h2o()
test_h2o <- test %>% as.data.frame() %>% select(target,features) %>% as.h2o()
model <- h2o.glm(
x = features, y = target,
training_frame = train,
validation_frame = test,
nfolds = 10, seed = 123,
lambda = 0, compute_p_values = T)
}
model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3))
y_pred <- model %>% h2o.predict(newdata = test) %>% as.data.frame()
y_pred$predict
test_set <- test %>% as.data.frame()
residuals = test_set$Life_expectancy - y_pred$predict
# Calculate RMSE (Root Mean Square Error) ----
(RMSE = sqrt(mean(residuals^2)))
# Calculate Adjusted R2 (R Squared) ----
(y_test_mean = mean(test_set$Life_expectancy))
library(ggplot2)
library(caret)
library(dplyr)
library(mltools)
library(data.table)
library(h2o)
data <- mpg
which(is.na(data))
h2o.init()
h2o_data <- data %>% as.h2o()
# Splitting the data ----
h2o_data <- h2o_data %>% h2o.splitFrame(ratios = 0.8, seed = 123)
train <- h2o_data[[1]]
test <- h2o_data[[2]]
target <- "cty"
features <- c("year", "cyl", "displ")
model <- h2o.glm(
x = features, y = target,
training_frame = train,
validation_frame = test,
nfolds = 10, seed = 123,
lambda = 0, compute_p_values = T)
model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3)) %>%
.[-1,] %>%
arrange(desc(p_value))
while(model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3)) %>%
.[-1,] %>%
arrange(desc(p_value)) %>%
.[1,2] > 0.05) {
model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3)) %>%
filter(!is.nan(p_value)) %>%
.[-1,] %>%
arrange(desc(p_value)) %>%
.[1,1] -> v
features <- features[features!=v]
train_h2o <- train %>% as.data.frame() %>% select(target,features) %>% as.h2o()
test_h2o <- test %>% as.data.frame() %>% select(target,features) %>% as.h2o()
model <- h2o.glm(
x = features, y = target,
training_frame = train,
validation_frame = test,
nfolds = 10, seed = 123,
lambda = 0, compute_p_values = T)
}
model@model$coefficients_table %>%
as.data.frame() %>%
dplyr::select(names,p_value) %>%
mutate(p_value = round(p_value,3))
